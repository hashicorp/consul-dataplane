name: build

# We now default to running this workflow on every pull_request push
# in addition to protected branch push.
#
# This provides fast feedback when build issues occur, so they can be
# fixed prior to being merged.
#
# If you want to opt out of this, and only run the build on certain branches
# please refer to the documentation on branch filtering here:
#
#   https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onpushbranchestagsbranches-ignoretags-ignore
#
on:
  push:
    branches:
      - main
      - release/**
  pull_request:
  workflow_dispatch:

env:
  PKG_NAME: "consul-dataplane"

jobs:
  conditional-skip:
    uses: ./.github/workflows/reusable-conditional-skip.yml

  get-go-version:
    # Cascades down to test jobs
    needs: [conditional-skip]
    if: needs.conditional-skip.outputs.skip-ci != 'true'
    uses: ./.github/workflows/reusable-get-go-version.yml

  get-product-version:
    # Cascades down to test jobs
    needs: [conditional-skip]
    if: needs.conditional-skip.outputs.skip-ci != 'true'
    runs-on: ubuntu-latest
    outputs:
      product-version: ${{ steps.get-product-version.outputs.product-version }}
      shared-ldflags: ${{ steps.shared-ldflags.outputs.shared-ldflags }}
    steps:
      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
      - name: get product version
        id: get-product-version
        run: |
          make version
          echo "product-version=$(make version)" >> $GITHUB_OUTPUT
      - name: Set shared -ldflags
        id: shared-ldflags
        run: |
          T="github.com/hashicorp/consul-dataplane/pkg/version"
          echo "shared-ldflags=-X ${T}.GitCommit=${GITHUB_SHA::8} \
          -X ${T}.GitDescribe=${{ steps.get-product-version.outputs.product-version }} \
          " >> "$GITHUB_OUTPUT"
  generate-metadata-file:
    needs: get-product-version
    runs-on: ubuntu-latest
    outputs:
      filepath: ${{ steps.generate-metadata-file.outputs.filepath }}
    steps:
      - name: "Checkout directory"
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
      - name: Generate metadata file
        id: generate-metadata-file
        uses: hashicorp/actions-generate-metadata@v1
        with:
          version: ${{ needs.get-product-version.outputs.product-version }}
          product: ${{ env.PKG_NAME }}
          repositoryOwner: "hashicorp"
      - uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: metadata.json
          path: ${{ steps.generate-metadata-file.outputs.filepath }}

  build-linux:
    needs:
      - get-go-version
      - get-product-version
    runs-on: ubuntu-22.04 # the GLIBC is too high on 22.04
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    strategy:
      matrix:
        include:
          - {goos: "linux", goarch: "arm"}
          - {goos: "linux", goarch: "arm64"}
          - {goos: "linux", goarch: "386"}
          - {goos: "linux", goarch: "amd64"}
          - {goos: "linux", goarch: "amd64", gotags: "fips", env: "CGO_ENABLED=1 GOEXPERIMENT=boringcrypto", fips: "+fips1402", pkg_suffix: "-fips" }
          - {goos: "linux", goarch: "arm64", gotags: "fips", env: "CGO_ENABLED=1 GOEXPERIMENT=boringcrypto CC=aarch64-linux-gnu-gcc", fips: "+fips1402", pkg_suffix: "-fips" }
          - {goos: "darwin", goarch: "amd64"}
          - {goos: "darwin", goarch: "arm64"}

      fail-fast: true

    name: Go ${{ needs.get-go-version.outputs.go-version }} ${{ matrix.goos }} ${{ matrix.goarch }} ${{ matrix.fips }} build

    steps:
      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      - uses: hashicorp/actions-go-build@v1
        name: Build non-FIPS
        if : ${{ matrix.fips != '+fips1402' }}
        with:
          product_name: ${{ env.PKG_NAME }}
          product_version: ${{ needs.get-product-version.outputs.product-version }}${{ matrix.fips }}
          go_version: ${{ needs.get-go-version.outputs.go-version }}
          os: ${{ matrix.goos }}
          arch: ${{ matrix.goarch }}
          reproducible: assert
          instructions: |
            cp LICENSE $TARGET_DIR/LICENSE.txt
            if [[ "${{ matrix.fips }}" == "+fips1402" ]]
            then
              sudo apt-get update --allow-releaseinfo-change-suite --allow-releaseinfo-change-version && sudo apt-get install -y build-essential gcc-aarch64-linux-gnu
            fi
            ${{ matrix.env }} go build -tags=${{ matrix.gotags }} -trimpath -buildvcs=false -ldflags="-X github.com/hashicorp/consul-dataplane/pkg/version.GitCommit=${GITHUB_SHA::8}" -o $BIN_PATH ./cmd/$BIN_NAME

      - name: Build ubuntu-focal-builder image
        if: ${{ matrix.goos != 'windows' && matrix.fips == '+fips1402' }}
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4
        with:
          platforms: linux/amd64 # we only ever build amd64 images because we always run on amd64 runners and cross-compile inside the container if needed
          context: .github/containers/ubuntu/
          build-args: |
            GO_VERSION=${{ needs.get-go-version.outputs.go-version }}
          push: true
          tags: localhost:5000/ubuntu-focal-builder:${{ github.sha }}

      - uses: hashicorp/actions-go-build@v1
        name: Build FIPS non-windows
        if: ${{ matrix.goos != 'windows' && matrix.fips == '+fips1402' }}
        env:
          PRODUCT_VERSION: ${{ needs.get-product-version.outputs.product-version }}${{ matrix.fips }}
          GO_ENV: "${{ matrix.env }}"
          GO_VERSION: ${{ needs.get-go-version.outputs.go-version }}
          GOLDFLAGS: "${{needs.get-product-version.outputs.shared-ldflags}}"
          BINARY_PATH: "dist/${{ env.PKG_NAME }}"
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOTAGS: ${{ matrix.gotags }}
        with:
          product_name: ${{ env.PKG_NAME }}
          product_version: ${{ needs.get-product-version.outputs.product-version }}${{ matrix.fips }}
          go_version: ${{ needs.get-go-version.outputs.go-version }}
          os: ${{ matrix.goos }}
          arch: ${{ matrix.goarch }}
          reproducible: assert
          instructions: |-
            mkdir -p /build/dist
            mkdir -p .release/linux/package/usr/share/doc/$PKG_NAME
            cp LICENSE $TARGET_DIR/LICENSE.txt
            
            #### Create a script file to run inside Docker with detailed logging ####
            
              cat > container_build_script.sh << 'EOF'
              #!/bin/bash
              set -x  # Print each command before execution
  
              echo "====== Environment inside container ======"
              env | sort
              git config --global url."https://${GITHUB_TOKEN}:@github.com/".insteadOf "https://github.com/"
  
              if [ -n "$ELEVATED_GITHUB_TOKEN" ]; then
                echo "Configuring Git with elevated GitHub token for authentication..."
                git config --global url."https://${ELEVATED_GITHUB_TOKEN}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
                git config --global url."https://${ELEVATED_GITHUB_TOKEN}:x-oauth-basic@github.com/".insteadOf "git@github.com:"
              else
                echo "WARNING: ELEVATED_GITHUB_TOKEN not provided. Private repository access may fail."
                exit 1
              fi
               echo "Configuring Git for private repositories..."
  
              # Use .netrc for Git authentication - more reliable than url rewriting
              cat > /tmp/.netrc << EON
                machine github.com
                login oauth2
                password $ELEVATED_GITHUB_TOKEN
              EON
  
              # Set permissions and tell Git where to find it
              chmod 600 /tmp/.netrc
              export HOME=/tmp
  
              # Verify Git can access a private repository
              echo "Testing Git authentication..."
              git ls-remote https://github.com/hashicorp/consul-dataplane.git HEAD || {
                echo "Failed to authenticate with GitHub. Check token permissions."
                exit 1
              }
  
              # Ensure GOPRIVATE is set in the container
              export GOPRIVATE=${GOPRIVATE:-github.com/hashicorp}
  
              # Show Go environment (excluding sensitive info)
              go env | grep -v -E '(TOKEN|PASSWORD|SECRET|KEY)'
              echo "========================================"
  
              echo "====== Starting build process ======"
              echo "Go Environment: $GO_ENV"
              echo "Go Tags: $GOTAGS"
              echo "Gold Flags: $GOLDFLAGS"
              echo "Binary will be output to: /build/$BINARY_PATH"
              ls -la /build
              ls -la /build/dist
              # Executing the build command with detailed output
              BUILD_CMD="$GO_ENV go build -tags=$GOTAGS -ldflags \"$GOLDFLAGS\"  -o \"/build/$BINARY_PATH\" -trimpath -buildvcs=false ./cmd/$BIN_NAME"
              echo "Build command: $BUILD_CMD"
  
              # Use eval to properly execute the command
              eval "$BUILD_CMD"
              BUILD_STATUS=$?
              echo "======Binary exists - Checking package DL dependencies======"
              readelf -sW /build/dist/consul-dataplane | grep GLIBC_ || echo "No GLIBC symbols found."
              echo "Go build exit status: $BUILD_STATUS"
  
              if [ $BUILD_STATUS -ne 0 ]; then
              echo "ERROR: Go build failed with status $BUILD_STATUS"
              # Display more diagnostic information
              echo "Go version:"
              go version
              echo "Go environment:"
              go env
              exit $BUILD_STATUS
              fi
  
              echo "====== Listing build output ======"
              ls -la /build/
              ls -la /build/dist/
              echo "====== Build process completed successfully ======"
              EOF
            ###### end of script file #####
            
            
            # Make the script executable
            chmod +x container_build_script.sh

            ESCAPED_GOLDFLAGS=$(echo "${{env.GOLDFLAGS}}" | sed 's/"/\\"/g')
            echo "Running Docker container..."
            docker run --rm \
            --user "$(id -u):$(id -g)" \
            --env HOME=/tmp \
            --env PRODUCT_VERSION=${{env.PRODUCT_VERSION}} \
            --env GOLDFLAGS="$ESCAPED_GOLDFLAGS" \
            --env BINARY_PATH=${{env.BINARY_PATH}} \
            --env GOOS=${{env.GOOS}} \
            --env GOARCH=${{env.GOARCH}} \
            --env GOTAGS=${{env.GOTAGS}} \
            --env GO_ENV="${{env.GO_ENV}}" \
            --env PKG_NAME=${{env.PKG_NAME}} \
            --env GOPRIVATE="github.com/hashicorp" \
            --env ELEVATED_GITHUB_TOKEN=${{ secrets.ELEVATED_GITHUB_TOKEN }} \
            -v "$(pwd)":/build \
            -w /build \
            localhost:5000/ubuntu-focal-builder:${{ github.sha }} \
            /build/container_build_script.sh
            ls -la ./dist

      - name: Copy license file
        if: ${{ matrix.goos == 'linux' }}
        env:
          LICENSE_DIR: ".release/linux/package/usr/share/doc/${{ env.PKG_NAME }}"
        run: |
          mkdir -p "$LICENSE_DIR"
          cp LICENSE "$LICENSE_DIR/LICENSE.txt"

      - name: Package
        if: ${{ matrix.goos == 'linux' }}
        uses: hashicorp/actions-packaging-linux@v1
        with:
          name: ${{ github.event.repository.name }}${{ matrix.pkg_suffix }}
          description: "Consul dataplane connects an application to a Consul service mesh."
          arch: ${{ matrix.goarch }}
          version: ${{ needs.get-product-version.outputs.product-version }}${{ matrix.fips }}
          maintainer: "HashiCorp"
          homepage: "https://github.com/hashicorp/consul-dataplane"
          license: "MPL-2.0"
          binary: "dist/${{ env.PKG_NAME }}"
          deb_depends: "openssl"
          rpm_depends: "openssl"
          config_dir: ".release/linux/package/"

      - name: Set Package Names
        if: ${{ matrix.goos == 'linux' }}
        run: |
          echo "RPM_PACKAGE=$(basename out/*.rpm)" >> $GITHUB_ENV
          echo "DEB_PACKAGE=$(basename out/*.deb)" >> $GITHUB_ENV

      - uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        if: ${{ matrix.goos == 'linux' }}
        with:
          name: ${{ env.RPM_PACKAGE }}
          path: out/${{ env.RPM_PACKAGE }}

      - uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        if: ${{ matrix.goos == 'linux' }}
        with:
          name: ${{ env.DEB_PACKAGE }}
          path: out/${{ env.DEB_PACKAGE }}

  build-docker-default:
    name: Docker ${{ matrix.arch }} ${{ matrix.fips }} default release build
    needs:
      - get-go-version
      - get-product-version
      - build-linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # This is the subset of architectures we build binaries for officially
        # supported by Envoy.
        include:
          - { arch: "amd64" }
          - { arch: "amd64", fips: "+fips1402" }
          - { arch: "arm64" }
          - { arch: "arm64", fips: "+fips1402" }
    env:
      repo: ${{ github.event.repository.name }}
      version: ${{ needs.get-product-version.outputs.product-version }}${{ matrix.fips }}
    steps:
      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4

      # This naming convention will be used ONLY for per-commit dev images
      - name: Set docker dev tag
        run: |
          echo "full_dev_tag=${{ env.version }}"
          echo "full_dev_tag=${{ env.version }}" >> $GITHUB_ENV
          echo "minor_dev_tag=$(echo ${{ env.version }}| sed -E 's/([0-9]+\.[0-9]+)\.[0-9]+(-[0-9a-zA-Z\+\.]+)?$/\1\2/')" 
          echo "minor_dev_tag=$(echo ${{ env.version }}| sed -E 's/([0-9]+\.[0-9]+)\.[0-9]+(-[0-9a-zA-Z\+\.]+)?$/\1\2/')" >> $GITHUB_ENV
      - name: Docker Build (Action)
        if: ${{ !matrix.fips }}
        uses: hashicorp/actions-docker-build@v2
        with:
          smoke_test: |
            TEST_VERSION="$(docker run "${IMAGE_NAME}" --version | head -n1 | cut -d' ' -f3 | sed 's/^v//')"
            if [ "${TEST_VERSION}" != "${version}" ]; then
              echo "Test FAILED: Got ${TEST_VERSION}, want ${version}."
              exit 1
            fi
            echo "Test PASSED"
          version: ${{ env.version }}
          target: release-default
          arch: ${{ matrix.arch }}
          tags: |
            docker.io/hashicorp/${{env.repo}}:${{env.version}}
            public.ecr.aws/hashicorp/${{env.repo}}:${{env.version}}
          dev_tags: |
            docker.io/hashicorppreview/${{ env.repo }}:${{ env.full_dev_tag }}
            docker.io/hashicorppreview/${{ env.repo }}:${{ env.full_dev_tag }}-${{ github.sha }}
            docker.io/hashicorppreview/${{ env.repo }}:${{ env.minor_dev_tag }}
            docker.io/hashicorppreview/${{ env.repo }}:${{ env.minor_dev_tag }}-${{ github.sha }}
          extra_build_args: |
            GOLANG_VERSION=${{ needs.get-go-version.outputs.go-version }}

      - name: Docker FIPS Build (Action)
        if: ${{ matrix.fips }}
        uses: hashicorp/actions-docker-build@v2
        with:
          smoke_test: |
            TEST_VERSION="$(docker run "${IMAGE_NAME}" --version | head -n1 | cut -d' ' -f3 | sed 's/^v//')"
            if [ "${TEST_VERSION}" != "${version}" ]; then
              echo "Test FAILED: Got ${TEST_VERSION}, want ${version}."
              exit 1
            fi
            echo "Test PASSED"
          version: ${{ env.version }}
          target: release-fips-default
          arch: ${{ matrix.arch }}
          tags: |
            docker.io/hashicorp/${{env.repo}}-fips:${{env.version}}
            public.ecr.aws/hashicorp/${{env.repo}}-fips:${{env.version}}
          dev_tags: |
            docker.io/hashicorppreview/${{ env.repo }}-fips:${{ env.full_dev_tag }}
            docker.io/hashicorppreview/${{ env.repo }}-fips:${{ env.full_dev_tag }}-${{ github.sha }}
            docker.io/hashicorppreview/${{ env.repo }}-fips:${{ env.minor_dev_tag }}
            docker.io/hashicorppreview/${{ env.repo }}-fips:${{ env.minor_dev_tag }}-${{ github.sha }}
          extra_build_args: |
            GOLANG_VERSION=${{ needs.get-go-version.outputs.go-version }}

  build-docker-redhat:
    name: Docker ${{ matrix.fips }} UBI Image Build (for Red Hat Certified Container Registry)
    needs:
      - get-go-version
      - get-product-version
      - build-linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - { target-name: "release-ubi", registry-id: "631f805e0d15f623c5996c2e" }
          - { target-name: "release-fips-ubi", registry-id: "649cced3e093d1cc7f3d9b61", fips: "+fips1402" }
    env:
      repo: ${{github.event.repository.name}}
      version: ${{needs.get-product-version.outputs.product-version}}${{ matrix.fips }}
    steps:
      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
      - uses: hashicorp/actions-docker-build@v2
        with:
          version: ${{env.version}}
          target: ${{ matrix.target-name }}
          arch: amd64
          redhat_tag: quay.io/redhat-isv-containers/${{matrix.registry-id}}:${{env.version}}-ubi
          extra_build_args: |
            GOLANG_VERSION=${{ needs.get-go-version.outputs.go-version }}

  build-docker-ubi-dockerhub:
    name: Docker ${{ matrix.arch }} ${{ matrix.fips }} UBI build for DockerHub
    needs:
      - get-go-version
      - get-product-version
      - build-linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - { arch: "amd64" }
          - { arch: "amd64", fips: "+fips1402" }
    env:
      repo: ${{ github.event.repository.name }}
      version: ${{ needs.get-product-version.outputs.product-version }}${{ matrix.fips }}
    steps:
      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
      # This naming convention will be used ONLY for per-commit dev images
      - name: Set docker dev tag
        run: |
          echo "full_dev_tag=${{ env.version }}"
          echo "full_dev_tag=${{ env.version }}" >> $GITHUB_ENV
          echo "minor_dev_tag=$(echo ${{ env.version }}| sed -E 's/([0-9]+\.[0-9]+)\.[0-9]+(-[0-9a-zA-Z\+\.]+)?$/\1\2/')" 
          echo "minor_dev_tag=$(echo ${{ env.version }}| sed -E 's/([0-9]+\.[0-9]+)\.[0-9]+(-[0-9a-zA-Z\+\.]+)?$/\1\2/')" >> $GITHUB_ENV

      - name: Docker Build (Action)
        if: ${{ !matrix.fips }}
        uses: hashicorp/actions-docker-build@v2
        with:
          smoke_test: |
            TEST_VERSION="$(docker run "${IMAGE_NAME}" --version | head -n1 | cut -d' ' -f3 | sed 's/^v//')"
            if [ "${TEST_VERSION}" != "${version}" ]; then
              echo "Test FAILED: Got ${TEST_VERSION}, want ${version}}."
              exit 1
            fi
            echo "Test PASSED"
          version: ${{ env.version }}
          target: release-ubi
          arch: ${{ matrix.arch }}
          tags: |
            docker.io/hashicorp/${{env.repo}}:${{env.version}}-ubi
            public.ecr.aws/hashicorp/${{env.repo}}:${{env.version}}-ubi
          dev_tags: |
            docker.io/hashicorppreview/${{ env.repo }}:${{ env.full_dev_tag }}-ubi
            docker.io/hashicorppreview/${{ env.repo }}:${{ env.full_dev_tag }}-ubi-${{ github.sha }}
            docker.io/hashicorppreview/${{ env.repo }}:${{ env.minor_dev_tag }}-ubi
            docker.io/hashicorppreview/${{ env.repo }}:${{ env.minor_dev_tag }}-ubi-${{ github.sha }}
          extra_build_args: |
            GOLANG_VERSION=${{ needs.get-go-version.outputs.go-version }}

      - name: Docker FIPS Build (Action)
        if: ${{ matrix.fips }}
        uses: hashicorp/actions-docker-build@v2
        with:
          smoke_test: |
            TEST_VERSION="$(docker run "${IMAGE_NAME}" --version | head -n1 | cut -d' ' -f3 | sed 's/^v//')"
            if [ "${TEST_VERSION}" != "${version}" ]; then
              echo "Test FAILED: Got ${TEST_VERSION}, want ${version}}."
              exit 1
            fi
            echo "Test PASSED"
          version: ${{ env.version }}
          target: release-fips-ubi
          arch: ${{ matrix.arch }}
          tags: |
            docker.io/hashicorp/${{env.repo}}-fips:${{env.version}}-ubi
            public.ecr.aws/hashicorp/${{env.repo}}-fips:${{env.version}}-ubi
          dev_tags: |
            docker.io/hashicorppreview/${{ env.repo }}-fips:${{ env.full_dev_tag }}-ubi
            docker.io/hashicorppreview/${{ env.repo }}-fips:${{ env.full_dev_tag }}-ubi-${{ github.sha }}
            docker.io/hashicorppreview/${{ env.repo }}-fips:${{ env.minor_dev_tag }}-ubi
            docker.io/hashicorppreview/${{ env.repo }}-fips:${{ env.minor_dev_tag }}-ubi-${{ github.sha }}
          extra_build_args: |
            GOLANG_VERSION=${{ needs.get-go-version.outputs.go-version }}

  integration-tests:
    name: Integration Tests (Consul ${{ matrix.server.version }} ${{ matrix.dataplane.docker_target }})
    needs:
      - build-docker-default
      - build-docker-ubi-dockerhub
      - get-product-version
      - get-go-version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        server:
          - version: v1.15.0-dev
            image: hashicorppreview/consul:1.15-dev
          - version: v1.18.0-dev
            image: hashicorppreview/consul:1.18-dev
          - version: v1.19.0-dev
            image: hashicorppreview/consul:1.19-dev
          - version: v1.20.0-dev
            image: hashicorppreview/consul:1.20-dev
        dataplane:
          - image_suffix: ""
            docker_target: "release-default"
          - image_suffix: "-ubi"
            docker_target: "release-ubi"
    env:
      repo: ${{ github.event.repository.name }}
      version: ${{ needs.get-product-version.outputs.product-version }}
    steps:
      - name: Set docker dev tag
        run: |
          version="${{ env.version }}"
          echo "dev_tag=${{ env.version }}${{ matrix.dataplane.image_suffix }}" >> $GITHUB_ENV

      - name: Set image tarball
        run: |
          echo "image_tarball=${{env.repo}}_${{ matrix.dataplane.docker_target }}_linux_amd64_${{env.version}}_${{github.sha}}.docker.dev.tar" >> $GITHUB_ENV
      - uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          name: ${{env.image_tarball}}
      - run: docker load --input ${{env.image_tarball}}
      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
      - uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version: ${{ needs.get-go-version.outputs.go-version }}
      - id: run-tests
        run: cd integration-tests && go test -v -output-dir=./output -dataplane-image=hashicorppreview/${{env.repo}}:${{env.dev_tag}}-${{github.sha}} -server-image=${{matrix.server.image}} -server-version=${{matrix.server.version}}
        continue-on-error: true
      - uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        continue-on-error: true
        with:
          name: consul-${{matrix.server.version}}-${{matrix.dataplane.docker_target}}-integration-tests-output
          path: integration-tests/output/
          if-no-files-found: 'error'
      - name: Check for failures
        if: ${{ steps.run-tests.outcome != 'success' }}
        run: exit 1

  integration-tests-success:
    needs:
      - conditional-skip
      - integration-tests
    runs-on: ubuntu-latest
    if: always() && needs.conditional-skip.outputs.skip-ci != 'true'
    steps:
      - name: evaluate upstream job results
        run: |
          # exit 1 if failure or cancelled result for any upstream job
          if printf '${{ toJSON(needs) }}' | grep -E -i '\"result\": \"(failure|cancelled)\"'; then
            printf "Tests failed or workflow cancelled:\n\n${{ toJSON(needs) }}"
            exit 1
          fi
